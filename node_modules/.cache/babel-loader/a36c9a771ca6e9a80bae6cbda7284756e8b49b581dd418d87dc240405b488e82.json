{"ast":null,"code":"var alpha = /^[A-Z]+$/i,\n  alphanumeric = /^[0-9A-Z]+$/i,\n  ascii = /^[\\x00-\\x7F]+$/,\n  base64 = /^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$/i,\n  email = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nhexadecimal = /^[0-9A-F]+$/i;\n\n// https://en.wikipedia.org/wiki/Universally_unique_identifier#Definition\nvar uuid = {\n  '3': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-3[0-9A-Fa-f]{3}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/i,\n  '4': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$/i,\n  '5': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-5[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$/i,\n  all: /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[1-5][0-9A-Fa-f]{3}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/i\n};\n\n// ************************************************************************************************\n//\n// isString\n//\n// Check if the value is string or not\n//\n//\n// Examples:\n//     isString(null); // returns false\n//     isString(''); // returns true\n//     isString('hello'); // returns true\n//     isString(new String('hellow')); // returns true\n//\n// ************************************************************************************************\nfunction isString(value) {\n  return Object.prototype.toString.call(value) === '[object String]';\n}\n\n// ************************************************************************************************\n//\n// isNumber\n//\n// Check if the value is Number or not\n//\n//\n// Examples:\n//     isNumber(null); // returns false\n//     isNumber('7'); // returns false\n//     isNumber(7); // returns true\n//     isNumber(new Number(7)); // returns true\n//\n// ************************************************************************************************\nfunction isNumber(value) {\n  return Object.prototype.toString.call(value) === '[object Number]';\n}\n\n// ************************************************************************************************\n//\n// isArray\n//\n// Check if the value is Array or not\n//\n//\n// Examples:\n//     isArray(null); // returns false\n//     isArray('7'); // returns false\n//     isArray(['5', '7']); // returns true\n//     isArray(new Array(7, 11)); // returns true\n//\n// ************************************************************************************************\nfunction isArray(value) {\n  return Object.prototype.toString.call(value) === '[object Array]';\n}\n\n// ************************************************************************************************\n//\n// isObject\n//\n// Check if the value is Object or not \n// (Value could be String object, Number Object, Array Object, Date object etc.)\n//\n// Examples:\n//     isObject(null); // returns true\n//     isObject(new Number(5)); // returns true\n//     isObject({}); // returns true\n//     isObject(new Array(7, 11)); // returns true\n//     isObject(''); // returns false\n//\n// ************************************************************************************************\nfunction isObject(value) {\n  return typeof value === 'object';\n}\n\n// ************************************************************************************************\n//\n// isStrictObject\n//\n// Check if the value is Object or not \n//\n// Examples:\n//     isStrictObject(null); // returns false\n//     isStrictObject(new Number(5)); // returns false\n//     isStrictObject({}); // returns true\n//     isStrictObject(new Array(7, 11)); // returns false\n//     isStrictObject(''); // returns false\n//\n// ************************************************************************************************\nfunction isStrictObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\n// ************************************************************************************************\n//\n// isRegExp\n//\n// Check if the value is RegExp or not\n//\n// Examples:\n//     isRegExp(null); // returns false\n//     isRegExp('/abc/'); // returns false\n//     isRegExp(/abc/); // returns true\n//     isRegExp(new RegExp('abc')); // returns true\n//\n// ************************************************************************************************\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\n// ************************************************************************************************\n//\n// isStrictBoolean\n//\n// Check if the value is Boolean object or not\n//\n// Examples:\n// \t\tisStrictBoolean(new Boolean(true)) // returns true\n// \t\tisStrictBoolean(new Boolean(false)) // returns true\n// \t\tisStrictBoolean(true) // returns true\n// \t\tisStrictBoolean(false) // returns true\n//\n// ************************************************************************************************\nfunction isStrictBoolean(value) {\n  return Object.prototype.toString.call(value) === '[object Boolean]';\n}\n\n// ************************************************************************************************\n//\n// isBoolean\n//\n// Check if the value is Boolean or not\n//\n// Examples:\n// \t\tisBoolean() // returns false\n// \t\tisBoolean(new Boolean(false)) // returns true\n// \t\tisBoolean(true) // returns true\n// \t\tisBoolean('1') // returns true\n// \t\tisBoolean(false) // returns true\n//\n// ************************************************************************************************\nfunction isBoolean(value) {\n  if (isNull(value)) return false;\n  return ['true', 'false', '1', '0'].indexOf(value.toLowerCase().toString()) >= 0;\n}\n\n// ************************************************************************************************\n//\n// isFunction\n//\n// Check if the value is Function or not\n//\n// Examples:\n// function test() {return true;}\n// function test2() {};\n// var arr = ['Item1', 'Item2', 'Item3'];\n// var obj = {};\n//  \tisFunction(test) // returns true\n//  \tisFunction(test2) // returns true\n//  \tisFunction(arr) // returns false\n//  \tisFunction(obj) // returns false\n//  \tisFunction(null) // returns false\n//\n// ************************************************************************************************\nfunction isFunction(value) {\n  return Object.prototype.toString.call(value) === '[object Function]';\n}\n\n// ************************************************************************************************\n//\n// isTrue\n//\n// Check if the value is Boolean(true) or not\n//\n// Examples:\n// \t\tisTrue(true) // returns true\n//      isTrue(false) // returns false\n//      isTrue(new Boolean(true)) // returns false\n//\n// ************************************************************************************************\nfunction isTrue(value) {\n  return value === true;\n}\n\n// ************************************************************************************************\n//\n// isFalse\n//\n// Check if the value is Boolean(false) or not\n//\n// Examples:\n// \t\tisFalse(true) // returns false\n//      isFalse(false) // returns true\n//      isFalse(new Boolean(false)) // returns false\n//\n// ************************************************************************************************\nfunction isFalse(value) {\n  return value === false;\n}\n\n// ************************************************************************************************\n//\n// isLowerCase\n//\n// Check if the string is a lowercase string\n//\n// Examples :\n// \t\tisLowerCase(null) // returns false\n// \t\tisLowerCase() // returns true\n// \t\tisLowerCase(true) // returns false\n// \t\tisLowerCase('gaurav') // returns true\n//\n// ************************************************************************************************\nfunction isLowerCase(value) {\n  if (isString(value)) return value === value.toLowerCase();else return false;\n}\n\n// ************************************************************************************************\n//\n// isUpperCase\n//\n// Check if the string is a uppercase string\n//\n// Examples :\n// \t\tisUpperCase(null) // returns false\n// \t\tisUpperCase() // returns true\n// \t\tisUpperCase(false) // returns false\n// \t\tisUpperCase('GAURAV') // returns true\n//\n// ************************************************************************************************\nfunction isUpperCase(value) {\n  if (isString(value)) return value === value.toUpperCase();else return false;\n}\n\n// ************************************************************************************************\n//\n// isTitleCase\n//\n// Check is the string is title case \n// i.e. first letter of each word in the string is capital case\n//\n// Examples :\n// \t\tisTitleCase('') // returns true\n// \t\tisTitleCase('Gaurav') // returns true\n// \t\tisTitleCase('Gaurav Luthra') // returns true\n// \t\tisTitleCase('hello World') // returns false\n// \t\tisTitleCase('HATs Off To YOU') // returns true\n//\n// ************************************************************************************************\nfunction isTitleCase(value) {\n  var retVal = false;\n  if (isString(value)) {\n    var values = value.split(' ');\n    retVal = true;\n    for (var i = 0, len = values.length; i < len; i++) {\n      if (values[i].trim().length > 0 && !isUpperCase(values[i].charAt(0))) {\n        return false;\n      }\n    }\n    ;\n  }\n  return retVal;\n}\n\n// ************************************************************************************************\n//\n// isNumeric\n//\n// Check if the string is a number\n//\n// Examples:\n// \t\tisNumeric('7') // returns true\n// \t\tisNumeric('17.87') // returns true\n// \t\tisNumeric('\\t\\t') // returns false\n// \t\tisNumeric(-Infinity) // returns true\n// \t\tisNumeric(false) // returns false\n//\n// ************************************************************************************************\nfunction isNumeric(value) {\n  return !isNaN(parseFloat(value));\n}\n\n// ************************************************************************************************\n//\n// isJSON\n//\n// Check if the string/object is valid JSON\n//\n// Examples:\n//\tvar a = {a : 'a', b : 'b', c : 'c', d : 'd'};\n//  var b = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : { key1 : 'value1', key2 : 'value2'}}};\n//\tvar c = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : { key1 : 'value1', key2 : 'value2', }}};  // Extra comma\n//\n//     isJSON(null); // returns false\n//     isJSON('/abc/'); // returns false\n//     isJSON({}); // returns true\n//     isJSON(new Object()); // returns true\n//     isJSON(a); // returns true\n//     isJSON(b); // returns true\n//     isJSON(c); // returns true\n//     isJSON(\"{\\\"a\\\" : \\\"5\\\"}\"); // returns true\n//     isJSON(\"\\n{\\\"a\\\" : \\\"5\\\"}\\n\"); // returns true\n//\n// ************************************************************************************************\nfunction isJSON(value) {\n  var retVal = false;\n  try {\n    if (isString(value)) return typeof JSON.parse(value) === 'object';else if (typeof value === 'object' && value !== null && isNaN(value)) return typeof JSON.parse(JSON.stringify(value)) === 'object';\n  } catch (e) {}\n  return retVal;\n}\n\n// ************************************************************************************************\n//\n// isBase64\n//\n// Check if the string is base64 encoded\n//\n// Examples:\n// \t\tisBase64('Z2F1cmF2') // returns false\n// \t\tisBase64('e1wiYVwiIDoge1wiYlwiIDoge1wiY1wiIDogdHJ1ZX19LCBcImRcIiA6IHtcImVcIiA6IHtcImZcIiA6IHRydWV9fX0=') // returns true\n// \t\tisBase64('gaurav') // returns false\n// \t\tisBase64('Zm9vYg==') // returns true\n//\n// ************************************************************************************************\nfunction isBase64(value) {\n  if (isString(value)) return base64.test(value);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isAlpha\n//\n// Check if the string contains only alphabets, both upper and lower case\n//\n// Examples :\n//\t\tisAlpha('') //returns false\n//\t\tisAlpha()  // returns false\n//      isAlpha('asd')  // returns true\n//      isAlpha('123')  // returns false\n//      isAlpha('bkjkjkjk') // returns true\n//      isAlpha('k nk') // returns false\n//\n// ************************************************************************************************\nfunction isAlpha(str) {\n  if (isString(str)) return alpha.test(str);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isAlphanumeric\n//\n// Check if the string contains alphabets and numbers\n//\n// Examples :\n// \t\tisAlphanumeric('abc') // returns true\n// \t\tisAlphanumeric('abc123۞') // returns false\n// \t\tisAlphanumeric(new Object()) // returns false\n// \t\tisAlphanumeric('134766678') // returns true\n// \t\tisAlphanumeric() // returns false\n// \t\tisAlphanumeric(null) // returns false\n// \t\tisAlphanumeric('12345abc') // returns true\n// \t\tisAlphanumeric(2345abc) // returns false\n//\n// ************************************************************************************************\nfunction isAlphanumeric(str) {\n  if (isString(str)) return alphanumeric.test(str);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isHexadecimal\n//\n// Check if the string is a hexadecimal number\n//\n// Examples :\n// \t\tisHexadecimal('1f') // returns true\n// \t\tisHexadecimal('0x1f') // returns false\n// \t\tisHexadecimal('1F') // returns true\n// \t\tisHexadecimal('0x1F') // returns false\n//      isHexadecimal('asdfg') // returns false\n//\t\tisHexadecimal('efa0123') // returns true\n//\n// ************************************************************************************************\nfunction isHexadecimal(str) {\n  if (isString(str)) return hexadecimal.test(str);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isAscii\n//\n// Check if the string contains only ascii characters\n//\n// Examples :\n// \t\tisAscii(' ') // returns false\n// \t\tisAscii(' ') // returns true\n// \t\tisAscii(null) // returns false\n// \t\tisAscii(undefined) // returns false\n// \t\tisAscii('{}') // returns true\n//\t\tisAscii('gaurav+luthra') // returns true\n//\t\tisAscii('gaurav%luthra') // returns true\n// \t\tisAscii('ᴁ') // returns false\n//\t\tisAscii('ᴁᴪᴙݝۺ') // returns false\n//\n// ************************************************************************************************\nfunction isAscii(str) {\n  if (isString(str)) return ascii.test(str);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isNull\n//\n// Check if the value is null\n//\n// Examples :\n// \t\tisNull() // returns true\n// \t\tisNull(undefined) // returns true\n// \t\tisNull(null) // returns true\n// \t\tisNull(0/0) // returns true\n// \t\tisNull(false) // returns false\n// \t\tisNull(new Object()) // returns true\n//\n// ************************************************************************************************\nfunction isNull(value) {\n  return value === null || typeof value === 'undefined' || isNaN(value) && !value.length;\n}\n\n// ************************************************************************************************\n//\n// isValidEmail\n//\n// Check if the string is a valid email address\n//\n// Argument(s):\n// 1. str : Input email address\n//\n// Examples:\n//     isValidEmail(null); // returns false\n//     isValidEmail(''); // returns false\n//     isValidEmail('luthra.zenith@google.com'); // returns true\n//     isValidEmail('luthra.zenithgoogle.com'); // returns false\n//\n// ************************************************************************************************\nfunction isValidEmail(str) {\n  if (!isString(str)) return false;\n\n  // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690\n  // http://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n  if (str.length > 254) return false;\n\n  // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript/46181#46181\n  var valid = email.test(str);\n  if (!valid) return false;\n\n  // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690\n  var emailParts = str.split(\"@\");\n  if (emailParts[0].length > 64) return false;\n  var domainParts = parts[1].split(\".\");\n\n  // None of the domain part should be greater than 63 characters\n  if (domainParts.some(function (part) {\n    return part.length > 63;\n  })) {\n    return false;\n  }\n  return true;\n}\n\n// ************************************************************************************************\n//\n// isUUID\n//\n// Check if the specified string is uuid(of specified version)\n//\n// Argument(s):\n// 1. str : string that needs to be checked if it is UUID\n// 2. version : UUID version, there are total of 5 UUID version viz. 1,2,3,4,5\n//\n// Examples:\n//     isUUID(null); // returns false\n//     isUUID(''); // returns false\n//     isUUID('4925123f-85a1-46bd-bfef-14026fbd4800', 4); // returns true\n//     isUUID('4956123f-89a1-36bd-cfef-14026fbd1270', 3); // returns true\n//\n// ************************************************************************************************\nfunction isUUID(str, version) {\n  if (!isString(str)) return false;\n  var uuidPattern = uuid[version ? version : 'all'];\n  return uuidPattern && uuidPattern.test(str);\n}\n\n// ************************************************************************************************\n//\n// isURIEncoded\n//\n// Check if String is URI encoded\n//\n// Argument(s):\n// 1. str : input string to be checked if it has been URI encoded\n//\n// Examples:\n//     isURIEncoded(null); // returns false\n//     isURIEncoded(''); // returns true\n//     isURIEncoded('gaurav'); // returns true\n//\n// ************************************************************************************************\nfunction isURIEncoded(str) {\n  if (!isString(str)) return false;\n  var decoded = decodeURI(str);\n  if (decoded == str) return false;\n  return true;\n}\n\n// ************************************************************************************************\n//\n// isEmpty\n//\n// Check if the string doesn't contain anything\n//\n// Argument(s):\n// 1. value : input string to be checked for emptyness\n//\n// Examples:\n//     isEmpty(null); // returns true\n//     isEmpty(''); // returns true\n//     isEmpty('    '); // returns false\n//\n// ************************************************************************************************\nfunction isEmpty(value) {\n  return isNull(value) || value.length == 0;\n}\n\n// ************************************************************************************************\n//\n// isWhiteSpace\n//\n// Check if the string contains only whitespaces\n//\n// Argument(s):\n// 1. value : input string to be checked for whitespaces\n//\n// Examples:\n//     isWhiteSpace(null); // returns false\n//     isWhiteSpace(''); // returns true\n//     isWhiteSpace('    '); // returns true\n//\n// ************************************************************************************************\nfunction isWhiteSpace(value) {\n  return isString(value) && value.trim().length == 0;\n}\n\n// ************************************************************************************************\n//\n// isBlank\n//\n// Check if the string is blank : i.e. either it is empty or only contains whitespaces\n//\n// Argument(s):\n// 1. value : Value to be checked for 'blankness'\n//\n// Examples:\n//     isBlank(null); // returns true\n//     isBlank(''); // returns true\n//     isBlank('    '); // returns true\n//\n// ************************************************************************************************\nfunction isBlank(value) {\n  return isEmpty(value) || isWhiteSpace(value);\n}\n\n// ************************************************************************************************\n//\n// contains\n//\n// Check if the string contains another string(Case sensitive search)\n//\n// Argument(s):\n// 1. baseStr : Base string in which we need to look\n// 2. searchStr : String to be searched in base str\n//\n// Examples:\n// \t   var baseStr = 'This is me and that is you';\n// \t   var searchStr = 'this';\n//     contains(baseStr, searchStr); // returns false\n//     contains(baseStr, 'This'); // returns true\n//     contains('I am your friend', 'you'); // returns true\n//\n// ************************************************************************************************\nfunction contains(baseStr, searchStr) {\n  if (!isString(baseStr) || !isString(searchStr)) return false;\n  if (baseStr.indexOf(searchStr) > -1) return true;\n  return false;\n}\n\n// ************************************************************************************************\n//\n// containsIgnoreCase\n//\n// Check if the string contains another string(Case insensitive search)\n//\n// Argument(s):\n// 1. baseStr : Base string in which we need to look\n// 2. searchStr : String to be searched in base str\n//\n// Examples:\n// \t   var baseStr = 'This is this and that is that';\n// \t   var searchStr = 'this';\n//     containsIgnoreCase(baseStr, searchStr); // returns true\n//     containsIgnoreCase(baseStr, 'hello'); // returns false\n//     containsIgnoreCase('I am your friend', 'you'); // returns true\n//\n// ************************************************************************************************\nfunction containsIgnoreCase(baseStr, searchStr) {\n  if (!isString(baseStr) || !isString(searchStr)) return false;\n  if (baseStr.toLowerCase().indexOf(searchStr.toLowerCase()) > -1) return true;\n  return false;\n}\n\n// ************************************************************************************************\n//\n// containsKey\n//\n// Safely search into a object and returns true if specified key is present. \n// Returns false if the intended target is not present.\n//\n// Examples:\n//     var o = { qwe : { asd : { zxc : 123 } } };\n//     containsKey(o, 'qwe'); // returns true\n//     containsKey(o, 'zxc'); // returns false, as it is not present at top level\n//     containsKey(o, 'qwer'); // returns false.  there's no 'qwer' inside o\n//     containsKey(null, 'qwe'); // returns false. The object to look into is not there.\n//\n// ************************************************************************************************\nfunction containsKey(obj, key) {\n  // If JSON string is passed instead of JSON object\n  // Check if it is valid JSON string\n  if (typeof obj === 'string' && !isJSON(obj)) return false;\n  if (typeof obj === 'string') obj = JSON.parse(obj);\n  if (isStrictObject(obj)) return obj.hasOwnProperty(key);\n  return false;\n}\n\n// ************************************************************************************************\n//\n// containsDeepKey\n//\n// Safely reach into a nested object and returns true if specified key is present. \n// Returns false if any of the intermediate subobjects or the intended target are not present.\n// \n// Arguments:\n// 1. obj : Object to search in : It should be a valid JSON object/string\n// 2. key(s) : Comman seprated keys, with parent key first\n//\n// Examples:\n//     var o = { qwe : { asd : { zxc : 123 } } };\n//     containsDeepKey(o, 'qwe'); // returns true\n//     containsDeepKey(o, 'zxc'); // returns true\n//     containsDeepKey(o, 'qwe', 'asd'); // returns true\n//     containsDeepKey(null, 'qwe'); // returns false. The object to look into is not there.\n//\n// ************************************************************************************************\nfunction containsDeepKey(obj) {\n  // If JSON string is passed instead of JSON object\n  // Check if it is valid JSON string\n  if (typeof obj === 'string' && !isJSON(obj)) return false;\n  if (typeof obj === 'string') obj = JSON.parse(obj);\n  if (!isStrictObject(obj)) return false;\n  var args = Array.prototype.slice.call(arguments, 1);\n  for (var i = 0; i < args.length; i++) {\n    if (!obj || !obj.hasOwnProperty(args[i])) {\n      return false;\n    }\n    obj = obj[args[i]];\n  }\n  return true;\n}\n\n// ************************************************************************************************\n//\n// isPalindrome\n//\n// Check if input string is a palindrome or not\n// \n// Argument(s):\n// 1. str : The string to be checked for palindrome\n//\n// Examples:\n//     var str1 = 'abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba';\n//     var str2 = 'eye';\n//     var str3 = 'Hello';\n//     isPalindrome(str1); // returns true\n//     isPalindrome(str2); // returns true\n//     isPalindrome(str3); // returns false\n//\n// ************************************************************************************************\nfunction isPalindrome(str) {\n  if (!isString(str)) return false;\n  var endInx = str.length - 1,\n    startIdx = 0;\n  while (endInx > startIdx) {\n    if (str.charAt(startIdx++) !== str.charAt(endInx--)) return false;\n  }\n  return true;\n}\n\n// ************************************************************************************************\n//\n// objectEquals\n//\n// Check if two objects(String, Object, Number, Date, function, RegExp, Array)\n//  are equal\n//\n// Argument(s):\n// 1. x : First object to check for equality\n// 2. y : Second object to check with equality\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : { asd : { zxc : 123 } } };\n//     objectEquals(o, m); // returns true\n//     objectEquals(new Number(5), 5); // returns true\n//     objectEquals(['1', '2', '3'], ['3', '2', '1']); // returns false\n//     objectEquals(['1', '2', '3'], ['1', '2', '3']); // returns true\n//\n// ************************************************************************************************\nfunction objectEquals(x, y) {\n  'use strict';\n\n  if (x === null || x === undefined || y === null || y === undefined) return x === y;\n  if (x.constructor !== y.constructor) return false;\n  if (typeof x === 'function' && typeof y === 'function' || x instanceof Date && y instanceof Date || x instanceof RegExp && y instanceof RegExp || x instanceof String && y instanceof String || x instanceof Number && y instanceof Number) {\n    return x.toString() === y.toString();\n  }\n  if (x === y || x.valueOf() === y.valueOf()) return true;\n  if (Array.isArray(x) && Array.isArray(y) && x.length !== y.length) return false;\n\n  // If they are strictly equal, they both need to be object at least\n  if (!(x instanceof Object)) return false;\n  if (!(y instanceof Object)) return false;\n\n  // recursive object equality check\n  var p = Object.keys(x);\n  return Object.keys(y).every(function (i) {\n    return p.indexOf(i) !== -1;\n  }) && p.every(function (i) {\n    return objectEquals(x[i], y[i]);\n  });\n}\n\n// ************************************************************************************************\n//\n// hasAnyMethod\n//\n// Check if the object has any method present inside it\n//\n// Argument(s):\n// obj : Object which needs to be checked ffor method presence\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : 123, dummy : function() {console.log('Hello')} };\n//     hasAnyMethod(o); // returns false\n//     hasAnyMethod(null); // returns false\n//     hasAnyMethod(m); // returns true\n//     hasAnyMethod(new Array()); // returns false\n//\n// ************************************************************************************************\nfunction hasAnyMethod(obj) {\n  if (isStrictObject(obj)) {\n    var names = Object.getOwnPropertyNames(obj);\n    for (var i = names.length - 1; i >= 0; i--) {\n      if (typeof obj[names[i]] === 'function') return true;\n    }\n    ;\n  }\n  return false;\n}\n\n// ************************************************************************************************\n//\n// isMethodPresent\n//\n// Check if the object has the specified method present inside it\n//\n// Argument(s):\n// obj : Object which needs to be checked ffor method presence\n// methodName : Name of the method to look for\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : 123, dummy : function() {console.log('Hello')} };\n//     isMethodPresent(o); // returns false\n//     isMethodPresent(null); // returns false\n//     isMethodPresent(m); // returns false\n//     isMethodPresent(m, 'dummy'); // returns true\n//\n// ************************************************************************************************\nfunction isMethodPresent(obj, methodName) {\n  if (!hasAnyMethod(obj) || isEmpty(methodName)) return false;\n  var names = Object.getOwnPropertyNames(obj);\n  for (var i = names.length - 1; i >= 0; i--) {\n    if (typeof obj[names[i]] === 'function' && names[i] == methodName) return true;\n  }\n  ;\n  return false;\n}\nexports = module.exports = {\n  isString: isString,\n  isNumber: isNumber,\n  isArray: isArray,\n  isObject: isObject,\n  isStrictObject: isStrictObject,\n  isRegExp: isRegExp,\n  isBoolean: isBoolean,\n  isStrictBoolean: isStrictBoolean,\n  isFunction: isFunction,\n  isTrue: isTrue,\n  isFalse: isFalse,\n  isLowerCase: isLowerCase,\n  isUpperCase: isUpperCase,\n  isTitleCase: isTitleCase,\n  isNumeric: isNumeric,\n  isJSON: isJSON,\n  isBase64: isBase64,\n  isEmpty: isEmpty,\n  isBlank: isBlank,\n  isWhiteSpace: isWhiteSpace,\n  isAlpha: isAlpha,\n  isAlphanumeric: isAlphanumeric,\n  isHexadecimal: isHexadecimal,\n  isAscii: isAscii,\n  isValidEmail: isValidEmail,\n  isUUID: isUUID,\n  isURIEncoded: isURIEncoded,\n  containsKey: containsKey,\n  containsDeepKey: containsDeepKey,\n  contains: contains,\n  containsIgnoreCase: containsIgnoreCase,\n  isPalindrome: isPalindrome,\n  objectEquals: objectEquals,\n  isNull: isNull,\n  hasAnyMethod: hasAnyMethod,\n  isMethodPresent: isMethodPresent\n};","map":{"version":3,"names":["alpha","alphanumeric","ascii","base64","email","hexadecimal","uuid","all","isString","value","Object","prototype","toString","call","isNumber","isArray","isObject","isStrictObject","isRegExp","isStrictBoolean","isBoolean","isNull","indexOf","toLowerCase","isFunction","isTrue","isFalse","isLowerCase","isUpperCase","toUpperCase","isTitleCase","retVal","values","split","i","len","length","trim","charAt","isNumeric","isNaN","parseFloat","isJSON","JSON","parse","stringify","e","isBase64","test","isAlpha","str","isAlphanumeric","isHexadecimal","isAscii","isValidEmail","valid","emailParts","domainParts","parts","some","part","isUUID","version","uuidPattern","isURIEncoded","decoded","decodeURI","isEmpty","isWhiteSpace","isBlank","contains","baseStr","searchStr","containsIgnoreCase","containsKey","obj","key","hasOwnProperty","containsDeepKey","args","Array","slice","arguments","isPalindrome","endInx","startIdx","objectEquals","x","y","undefined","constructor","Date","RegExp","String","Number","valueOf","p","keys","every","hasAnyMethod","names","getOwnPropertyNames","isMethodPresent","methodName","exports","module"],"sources":["/home/brianmock/Code/spectrum-deco/node_modules/node-ratify/validate.js"],"sourcesContent":["\nvar        alpha = /^[A-Z]+$/i,\n    alphanumeric = /^[0-9A-Z]+$/i,\n           ascii = /^[\\x00-\\x7F]+$/,\n          base64 = /^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$/i,\n           email = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n     hexadecimal = /^[0-9A-F]+$/i;\n\n// https://en.wikipedia.org/wiki/Universally_unique_identifier#Definition\nvar uuid = {\n        '3': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-3[0-9A-Fa-f]{3}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/i\n      , '4': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$/i\n      , '5': /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-5[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$/i\n      , all: /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[1-5][0-9A-Fa-f]{3}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/i\n    };\n\n\n// ************************************************************************************************\n//\n// isString\n//\n// Check if the value is string or not\n//\n//\n// Examples:\n//     isString(null); // returns false\n//     isString(''); // returns true\n//     isString('hello'); // returns true\n//     isString(new String('hellow')); // returns true\n//\n// ************************************************************************************************\nfunction isString (value) {\n\treturn (Object.prototype.toString.call(value) === '[object String]');\n}\n\n// ************************************************************************************************\n//\n// isNumber\n//\n// Check if the value is Number or not\n//\n//\n// Examples:\n//     isNumber(null); // returns false\n//     isNumber('7'); // returns false\n//     isNumber(7); // returns true\n//     isNumber(new Number(7)); // returns true\n//\n// ************************************************************************************************\nfunction isNumber (value) {\n\treturn (Object.prototype.toString.call(value) === '[object Number]');\n}\n\n// ************************************************************************************************\n//\n// isArray\n//\n// Check if the value is Array or not\n//\n//\n// Examples:\n//     isArray(null); // returns false\n//     isArray('7'); // returns false\n//     isArray(['5', '7']); // returns true\n//     isArray(new Array(7, 11)); // returns true\n//\n// ************************************************************************************************\nfunction isArray(value) {\n\treturn (Object.prototype.toString.call(value) === '[object Array]');\n}\n\n// ************************************************************************************************\n//\n// isObject\n//\n// Check if the value is Object or not \n// (Value could be String object, Number Object, Array Object, Date object etc.)\n//\n// Examples:\n//     isObject(null); // returns true\n//     isObject(new Number(5)); // returns true\n//     isObject({}); // returns true\n//     isObject(new Array(7, 11)); // returns true\n//     isObject(''); // returns false\n//\n// ************************************************************************************************\nfunction isObject(value) {\n\treturn (typeof value === 'object');\n}\n\n// ************************************************************************************************\n//\n// isStrictObject\n//\n// Check if the value is Object or not \n//\n// Examples:\n//     isStrictObject(null); // returns false\n//     isStrictObject(new Number(5)); // returns false\n//     isStrictObject({}); // returns true\n//     isStrictObject(new Array(7, 11)); // returns false\n//     isStrictObject(''); // returns false\n//\n// ************************************************************************************************\nfunction isStrictObject(value) {\n\treturn (Object.prototype.toString.call(value) === '[object Object]');\n}\n\n// ************************************************************************************************\n//\n// isRegExp\n//\n// Check if the value is RegExp or not\n//\n// Examples:\n//     isRegExp(null); // returns false\n//     isRegExp('/abc/'); // returns false\n//     isRegExp(/abc/); // returns true\n//     isRegExp(new RegExp('abc')); // returns true\n//\n// ************************************************************************************************\nfunction isRegExp(value) {\n\treturn (Object.prototype.toString.call(value) === '[object RegExp]');\n}\n\n// ************************************************************************************************\n//\n// isStrictBoolean\n//\n// Check if the value is Boolean object or not\n//\n// Examples:\n// \t\tisStrictBoolean(new Boolean(true)) // returns true\n// \t\tisStrictBoolean(new Boolean(false)) // returns true\n// \t\tisStrictBoolean(true) // returns true\n// \t\tisStrictBoolean(false) // returns true\n//\n// ************************************************************************************************\nfunction isStrictBoolean(value) {\n\treturn (Object.prototype.toString.call(value) === '[object Boolean]');\n}\n\n// ************************************************************************************************\n//\n// isBoolean\n//\n// Check if the value is Boolean or not\n//\n// Examples:\n// \t\tisBoolean() // returns false\n// \t\tisBoolean(new Boolean(false)) // returns true\n// \t\tisBoolean(true) // returns true\n// \t\tisBoolean('1') // returns true\n// \t\tisBoolean(false) // returns true\n//\n// ************************************************************************************************\nfunction isBoolean(value) {\n\tif (isNull(value))\n\t\treturn false;\n\n\treturn (['true', 'false', '1', '0'].indexOf(value.toLowerCase().toString()) >= 0);\n}\n\n// ************************************************************************************************\n//\n// isFunction\n//\n// Check if the value is Function or not\n//\n// Examples:\n// function test() {return true;}\n// function test2() {};\n// var arr = ['Item1', 'Item2', 'Item3'];\n// var obj = {};\n//  \tisFunction(test) // returns true\n//  \tisFunction(test2) // returns true\n//  \tisFunction(arr) // returns false\n//  \tisFunction(obj) // returns false\n//  \tisFunction(null) // returns false\n//\n// ************************************************************************************************\nfunction isFunction(value) {\n\treturn (Object.prototype.toString.call(value) === '[object Function]');\n}\n\n// ************************************************************************************************\n//\n// isTrue\n//\n// Check if the value is Boolean(true) or not\n//\n// Examples:\n// \t\tisTrue(true) // returns true\n//      isTrue(false) // returns false\n//      isTrue(new Boolean(true)) // returns false\n//\n// ************************************************************************************************\nfunction isTrue (value) {\n\treturn (value === true);\n}\n\n// ************************************************************************************************\n//\n// isFalse\n//\n// Check if the value is Boolean(false) or not\n//\n// Examples:\n// \t\tisFalse(true) // returns false\n//      isFalse(false) // returns true\n//      isFalse(new Boolean(false)) // returns false\n//\n// ************************************************************************************************\nfunction isFalse(value) {\n\treturn (value === false);\n}\n\n// ************************************************************************************************\n//\n// isLowerCase\n//\n// Check if the string is a lowercase string\n//\n// Examples :\n// \t\tisLowerCase(null) // returns false\n// \t\tisLowerCase() // returns true\n// \t\tisLowerCase(true) // returns false\n// \t\tisLowerCase('gaurav') // returns true\n//\n// ************************************************************************************************\nfunction isLowerCase (value) {\n\tif (isString(value))\n\t\treturn value === value.toLowerCase();\n\telse\n\t\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isUpperCase\n//\n// Check if the string is a uppercase string\n//\n// Examples :\n// \t\tisUpperCase(null) // returns false\n// \t\tisUpperCase() // returns true\n// \t\tisUpperCase(false) // returns false\n// \t\tisUpperCase('GAURAV') // returns true\n//\n// ************************************************************************************************\nfunction isUpperCase (value) {\n\tif (isString(value))\n\t\treturn value === value.toUpperCase();\n\telse\n\t\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isTitleCase\n//\n// Check is the string is title case \n// i.e. first letter of each word in the string is capital case\n//\n// Examples :\n// \t\tisTitleCase('') // returns true\n// \t\tisTitleCase('Gaurav') // returns true\n// \t\tisTitleCase('Gaurav Luthra') // returns true\n// \t\tisTitleCase('hello World') // returns false\n// \t\tisTitleCase('HATs Off To YOU') // returns true\n//\n// ************************************************************************************************\nfunction isTitleCase(value) {\n\t\n\tvar retVal = false;\n\n\tif (isString(value)) {\n\n\t\tvar values = value.split(' ');\n\n\t\tretVal = true;\n\t\tfor (var i = 0, len = values.length; i < len; i++) {\n\t\t\tif ((values[i].trim().length > 0) && (!isUpperCase(values[i].charAt(0)))) {\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\t\n\t\t};\n\t}\n\n\treturn retVal;\n}\n\n// ************************************************************************************************\n//\n// isNumeric\n//\n// Check if the string is a number\n//\n// Examples:\n// \t\tisNumeric('7') // returns true\n// \t\tisNumeric('17.87') // returns true\n// \t\tisNumeric('\\t\\t') // returns false\n// \t\tisNumeric(-Infinity) // returns true\n// \t\tisNumeric(false) // returns false\n//\n// ************************************************************************************************\nfunction isNumeric (value) {\n\treturn (!isNaN(parseFloat(value)));\n}\n\n// ************************************************************************************************\n//\n// isJSON\n//\n// Check if the string/object is valid JSON\n//\n// Examples:\n//\tvar a = {a : 'a', b : 'b', c : 'c', d : 'd'};\n//  var b = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : { key1 : 'value1', key2 : 'value2'}}};\n//\tvar c = {a : 'a', b : 'b', c : { x : 'x', y : 'y', z : { key1 : 'value1', key2 : 'value2', }}};  // Extra comma\n//\n//     isJSON(null); // returns false\n//     isJSON('/abc/'); // returns false\n//     isJSON({}); // returns true\n//     isJSON(new Object()); // returns true\n//     isJSON(a); // returns true\n//     isJSON(b); // returns true\n//     isJSON(c); // returns true\n//     isJSON(\"{\\\"a\\\" : \\\"5\\\"}\"); // returns true\n//     isJSON(\"\\n{\\\"a\\\" : \\\"5\\\"}\\n\"); // returns true\n//\n// ************************************************************************************************\nfunction isJSON(value) {\n\tvar retVal = false;\n\ttry {\n\t\tif (isString(value))\n\t\t\treturn ((typeof JSON.parse(value)) === 'object');\n\t\telse if(typeof value === 'object' && value !== null && isNaN(value))\n\t\t\treturn ((typeof JSON.parse(JSON.stringify(value))) === 'object');\n\t} catch(e) {}\n\n\treturn retVal;\n}\n\n// ************************************************************************************************\n//\n// isBase64\n//\n// Check if the string is base64 encoded\n//\n// Examples:\n// \t\tisBase64('Z2F1cmF2') // returns false\n// \t\tisBase64('e1wiYVwiIDoge1wiYlwiIDoge1wiY1wiIDogdHJ1ZX19LCBcImRcIiA6IHtcImVcIiA6IHtcImZcIiA6IHRydWV9fX0=') // returns true\n// \t\tisBase64('gaurav') // returns false\n// \t\tisBase64('Zm9vYg==') // returns true\n//\n// ************************************************************************************************\nfunction isBase64(value) {\n\tif (isString(value))\n\t\treturn base64.test(value);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isAlpha\n//\n// Check if the string contains only alphabets, both upper and lower case\n//\n// Examples :\n//\t\tisAlpha('') //returns false\n//\t\tisAlpha()  // returns false\n//      isAlpha('asd')  // returns true\n//      isAlpha('123')  // returns false\n//      isAlpha('bkjkjkjk') // returns true\n//      isAlpha('k nk') // returns false\n//\n// ************************************************************************************************\nfunction isAlpha(str) {\n\tif (isString(str))\n\t\treturn alpha.test(str);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isAlphanumeric\n//\n// Check if the string contains alphabets and numbers\n//\n// Examples :\n// \t\tisAlphanumeric('abc') // returns true\n// \t\tisAlphanumeric('abc123۞') // returns false\n// \t\tisAlphanumeric(new Object()) // returns false\n// \t\tisAlphanumeric('134766678') // returns true\n// \t\tisAlphanumeric() // returns false\n// \t\tisAlphanumeric(null) // returns false\n// \t\tisAlphanumeric('12345abc') // returns true\n// \t\tisAlphanumeric(2345abc) // returns false\n//\n// ************************************************************************************************\nfunction isAlphanumeric(str) {\n\tif (isString(str))\n\t\treturn alphanumeric.test(str);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isHexadecimal\n//\n// Check if the string is a hexadecimal number\n//\n// Examples :\n// \t\tisHexadecimal('1f') // returns true\n// \t\tisHexadecimal('0x1f') // returns false\n// \t\tisHexadecimal('1F') // returns true\n// \t\tisHexadecimal('0x1F') // returns false\n//      isHexadecimal('asdfg') // returns false\n//\t\tisHexadecimal('efa0123') // returns true\n//\n// ************************************************************************************************\nfunction isHexadecimal(str) {\n\tif (isString(str))\n\t\treturn hexadecimal.test(str);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isAscii\n//\n// Check if the string contains only ascii characters\n//\n// Examples :\n// \t\tisAscii(' ') // returns false\n// \t\tisAscii(' ') // returns true\n// \t\tisAscii(null) // returns false\n// \t\tisAscii(undefined) // returns false\n// \t\tisAscii('{}') // returns true\n//\t\tisAscii('gaurav+luthra') // returns true\n//\t\tisAscii('gaurav%luthra') // returns true\n// \t\tisAscii('ᴁ') // returns false\n//\t\tisAscii('ᴁᴪᴙݝۺ') // returns false\n//\n// ************************************************************************************************\nfunction isAscii(str) {\n\tif (isString(str))\n\t\treturn ascii.test(str);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isNull\n//\n// Check if the value is null\n//\n// Examples :\n// \t\tisNull() // returns true\n// \t\tisNull(undefined) // returns true\n// \t\tisNull(null) // returns true\n// \t\tisNull(0/0) // returns true\n// \t\tisNull(false) // returns false\n// \t\tisNull(new Object()) // returns true\n//\n// ************************************************************************************************\nfunction isNull (value) {\n\treturn (value === null || typeof value === 'undefined' || (isNaN(value) && !value.length));\n}\n\n// ************************************************************************************************\n//\n// isValidEmail\n//\n// Check if the string is a valid email address\n//\n// Argument(s):\n// 1. str : Input email address\n//\n// Examples:\n//     isValidEmail(null); // returns false\n//     isValidEmail(''); // returns false\n//     isValidEmail('luthra.zenith@google.com'); // returns true\n//     isValidEmail('luthra.zenithgoogle.com'); // returns false\n//\n// ************************************************************************************************\nfunction isValidEmail (str) {\n\tif (!isString(str))\n\t\treturn false;\n\n\t// http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690\n\t// http://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n\tif (str.length > 254)\n\t\treturn false;\n\n\n\t// http://stackoverflow.com/questions/46155/validate-email-address-in-javascript/46181#46181\n\tvar valid = email.test(str);\n\tif (!valid)\n\t\treturn false;\n\n\t// http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690\n\tvar emailParts = str.split(\"@\");\n\tif(emailParts[0].length > 64)\n\t\treturn false;\n\n\tvar domainParts = parts[1].split(\".\");\n\n\t// None of the domain part should be greater than 63 characters\n\tif(domainParts.some(function(part) { \n\t\treturn part.length > 63; \n\t})) {\n\t\treturn false;\n\t}\n\n\treturn true;\n\n}\n\n// ************************************************************************************************\n//\n// isUUID\n//\n// Check if the specified string is uuid(of specified version)\n//\n// Argument(s):\n// 1. str : string that needs to be checked if it is UUID\n// 2. version : UUID version, there are total of 5 UUID version viz. 1,2,3,4,5\n//\n// Examples:\n//     isUUID(null); // returns false\n//     isUUID(''); // returns false\n//     isUUID('4925123f-85a1-46bd-bfef-14026fbd4800', 4); // returns true\n//     isUUID('4956123f-89a1-36bd-cfef-14026fbd1270', 3); // returns true\n//\n// ************************************************************************************************\nfunction isUUID (str, version) {\n\tif (!isString(str))\n\t\treturn false;\n\n\tvar uuidPattern = uuid[version ? version : 'all'];\n        \n    return (uuidPattern && uuidPattern.test(str));\n}\n\n// ************************************************************************************************\n//\n// isURIEncoded\n//\n// Check if String is URI encoded\n//\n// Argument(s):\n// 1. str : input string to be checked if it has been URI encoded\n//\n// Examples:\n//     isURIEncoded(null); // returns false\n//     isURIEncoded(''); // returns true\n//     isURIEncoded('gaurav'); // returns true\n//\n// ************************************************************************************************\nfunction isURIEncoded (str) {\n\tif (!isString(str))\n\t\treturn false;\n\n\tvar decoded = decodeURI(str);\n\n\tif (decoded == str)\n\t\treturn false;\n\n\treturn true;\n}\n\n// ************************************************************************************************\n//\n// isEmpty\n//\n// Check if the string doesn't contain anything\n//\n// Argument(s):\n// 1. value : input string to be checked for emptyness\n//\n// Examples:\n//     isEmpty(null); // returns true\n//     isEmpty(''); // returns true\n//     isEmpty('    '); // returns false\n//\n// ************************************************************************************************\nfunction isEmpty (value) {\n\treturn (isNull(value) || value.length == 0);\n}\n\n// ************************************************************************************************\n//\n// isWhiteSpace\n//\n// Check if the string contains only whitespaces\n//\n// Argument(s):\n// 1. value : input string to be checked for whitespaces\n//\n// Examples:\n//     isWhiteSpace(null); // returns false\n//     isWhiteSpace(''); // returns true\n//     isWhiteSpace('    '); // returns true\n//\n// ************************************************************************************************\nfunction isWhiteSpace (value) {\n\treturn (isString(value) && value.trim().length == 0);\n}\n\n// ************************************************************************************************\n//\n// isBlank\n//\n// Check if the string is blank : i.e. either it is empty or only contains whitespaces\n//\n// Argument(s):\n// 1. value : Value to be checked for 'blankness'\n//\n// Examples:\n//     isBlank(null); // returns true\n//     isBlank(''); // returns true\n//     isBlank('    '); // returns true\n//\n// ************************************************************************************************\nfunction isBlank (value) {\n\treturn (isEmpty(value) || isWhiteSpace(value));\n}\n\n// ************************************************************************************************\n//\n// contains\n//\n// Check if the string contains another string(Case sensitive search)\n//\n// Argument(s):\n// 1. baseStr : Base string in which we need to look\n// 2. searchStr : String to be searched in base str\n//\n// Examples:\n// \t   var baseStr = 'This is me and that is you';\n// \t   var searchStr = 'this';\n//     contains(baseStr, searchStr); // returns false\n//     contains(baseStr, 'This'); // returns true\n//     contains('I am your friend', 'you'); // returns true\n//\n// ************************************************************************************************\nfunction contains (baseStr, searchStr) {\n\tif (!isString(baseStr) || !isString(searchStr))\n\t\treturn false;\n\n\tif (baseStr.indexOf(searchStr) > -1)\n\t\treturn true;\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// containsIgnoreCase\n//\n// Check if the string contains another string(Case insensitive search)\n//\n// Argument(s):\n// 1. baseStr : Base string in which we need to look\n// 2. searchStr : String to be searched in base str\n//\n// Examples:\n// \t   var baseStr = 'This is this and that is that';\n// \t   var searchStr = 'this';\n//     containsIgnoreCase(baseStr, searchStr); // returns true\n//     containsIgnoreCase(baseStr, 'hello'); // returns false\n//     containsIgnoreCase('I am your friend', 'you'); // returns true\n//\n// ************************************************************************************************\nfunction containsIgnoreCase (baseStr, searchStr) {\n\tif (!isString(baseStr) || !isString(searchStr))\n\t\treturn false;\n\n\tif (baseStr.toLowerCase().indexOf(searchStr.toLowerCase()) > -1)\n\t\treturn true;\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// containsKey\n//\n// Safely search into a object and returns true if specified key is present. \n// Returns false if the intended target is not present.\n//\n// Examples:\n//     var o = { qwe : { asd : { zxc : 123 } } };\n//     containsKey(o, 'qwe'); // returns true\n//     containsKey(o, 'zxc'); // returns false, as it is not present at top level\n//     containsKey(o, 'qwer'); // returns false.  there's no 'qwer' inside o\n//     containsKey(null, 'qwe'); // returns false. The object to look into is not there.\n//\n// ************************************************************************************************\nfunction containsKey (obj, key) {\n\n\t// If JSON string is passed instead of JSON object\n\t// Check if it is valid JSON string\n\tif (typeof obj === 'string' && !isJSON(obj))\n\t\treturn false;\n\n\tif (typeof obj === 'string')\n\t\tobj = JSON.parse(obj);\n\n\tif (isStrictObject(obj))\n\t\treturn obj.hasOwnProperty(key);\n\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// containsDeepKey\n//\n// Safely reach into a nested object and returns true if specified key is present. \n// Returns false if any of the intermediate subobjects or the intended target are not present.\n// \n// Arguments:\n// 1. obj : Object to search in : It should be a valid JSON object/string\n// 2. key(s) : Comman seprated keys, with parent key first\n//\n// Examples:\n//     var o = { qwe : { asd : { zxc : 123 } } };\n//     containsDeepKey(o, 'qwe'); // returns true\n//     containsDeepKey(o, 'zxc'); // returns true\n//     containsDeepKey(o, 'qwe', 'asd'); // returns true\n//     containsDeepKey(null, 'qwe'); // returns false. The object to look into is not there.\n//\n// ************************************************************************************************\nfunction containsDeepKey (obj) {\n\n\t// If JSON string is passed instead of JSON object\n\t// Check if it is valid JSON string\n\tif (typeof obj === 'string' && !isJSON(obj))\n\t\treturn false;\n\n\tif (typeof obj === 'string')\n\t\tobj = JSON.parse(obj);\n\n\tif (!isStrictObject(obj))\n\t\treturn false;\n\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\tfor (var i = 0; i < args.length; i++) {\n\t    if (!obj || !obj.hasOwnProperty(args[i])) {\n\t      return false;\n\t    }\n\t    obj = obj[args[i]];\n\t}\n\t  \n\treturn true;\n}\n\n// ************************************************************************************************\n//\n// isPalindrome\n//\n// Check if input string is a palindrome or not\n// \n// Argument(s):\n// 1. str : The string to be checked for palindrome\n//\n// Examples:\n//     var str1 = 'abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba';\n//     var str2 = 'eye';\n//     var str3 = 'Hello';\n//     isPalindrome(str1); // returns true\n//     isPalindrome(str2); // returns true\n//     isPalindrome(str3); // returns false\n//\n// ************************************************************************************************\nfunction isPalindrome(str) {\n\tif (!isString(str))\n\t\treturn false;\n\n    var   endInx = str.length - 1,\n        startIdx = 0;\n\n    while (endInx > startIdx) {\n      if (str.charAt(startIdx++) !== str.charAt(endInx--))\n      \treturn false;\n    }\n    return true;\n}\n\n// ************************************************************************************************\n//\n// objectEquals\n//\n// Check if two objects(String, Object, Number, Date, function, RegExp, Array)\n//  are equal\n//\n// Argument(s):\n// 1. x : First object to check for equality\n// 2. y : Second object to check with equality\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : { asd : { zxc : 123 } } };\n//     objectEquals(o, m); // returns true\n//     objectEquals(new Number(5), 5); // returns true\n//     objectEquals(['1', '2', '3'], ['3', '2', '1']); // returns false\n//     objectEquals(['1', '2', '3'], ['1', '2', '3']); // returns true\n//\n// ************************************************************************************************\nfunction objectEquals(x, y) {\n\t'use strict';\n\n    if (x === null || x === undefined || y === null || y === undefined)\n    \treturn x === y;\n\n    if (x.constructor !== y.constructor) \n    \treturn false;\n\n    if ((typeof x === 'function' && typeof y === 'function') ||\n       (x instanceof Date && y instanceof Date) ||\n       (x instanceof RegExp && y instanceof RegExp) ||\n       (x instanceof String && y instanceof String) ||\n       (x instanceof Number && y instanceof Number)) {\n        return x.toString() === y.toString();\n    }\n    \n    if (x === y || x.valueOf() === y.valueOf()) \n    \treturn true;\n\n    if (Array.isArray(x) && Array.isArray(y) && x.length !== y.length) \n    \treturn false;\n\n    // If they are strictly equal, they both need to be object at least\n    if (!(x instanceof Object)) \n    \treturn false;\n\n    if (!(y instanceof Object)) \n    \treturn false;\n\n    // recursive object equality check\n    var p = Object.keys(x);\n    return Object.keys(y).every(function (i) { return p.indexOf(i) !== -1; }) &&\n        p.every(function (i) { return objectEquals(x[i], y[i]); });\n}\n\n\n// ************************************************************************************************\n//\n// hasAnyMethod\n//\n// Check if the object has any method present inside it\n//\n// Argument(s):\n// obj : Object which needs to be checked ffor method presence\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : 123, dummy : function() {console.log('Hello')} };\n//     hasAnyMethod(o); // returns false\n//     hasAnyMethod(null); // returns false\n//     hasAnyMethod(m); // returns true\n//     hasAnyMethod(new Array()); // returns false\n//\n// ************************************************************************************************\nfunction hasAnyMethod(obj) {\n\t\n\tif (isStrictObject(obj)) {\n\t\tvar names = Object.getOwnPropertyNames(obj);\n\n\t\tfor (var i = names.length - 1; i >= 0; i--) {\n\t\t\tif (typeof obj[names[i]] === 'function')\n\t\t\t\treturn true;\n\t\t};\n\t}\n\treturn false;\n}\n\n// ************************************************************************************************\n//\n// isMethodPresent\n//\n// Check if the object has the specified method present inside it\n//\n// Argument(s):\n// obj : Object which needs to be checked ffor method presence\n// methodName : Name of the method to look for\n//\n// Examples:\n// \t   var o = { qwe : { asd : { zxc : 123 } } };\n// \t   var m = { qwe : 123, dummy : function() {console.log('Hello')} };\n//     isMethodPresent(o); // returns false\n//     isMethodPresent(null); // returns false\n//     isMethodPresent(m); // returns false\n//     isMethodPresent(m, 'dummy'); // returns true\n//\n// ************************************************************************************************\nfunction isMethodPresent(obj, methodName) {\n\n\tif (!hasAnyMethod(obj) || isEmpty(methodName))\n\t\treturn false;\n\n\tvar names = Object.getOwnPropertyNames(obj);\n\n\tfor (var i = names.length - 1; i >= 0; i--) {\n\n\t\tif ((typeof obj[names[i]] === 'function') &&\n\t\t\tnames[i] == methodName)\n\t\t\treturn true;\n\t};\n\n\treturn false;\n}\n\nexports = module.exports = {\n\tisString             : isString,\n\tisNumber             : isNumber,\n\tisArray\t\t         : isArray,\n\tisObject\t         : isObject,\n\tisStrictObject       : isStrictObject,\n\tisRegExp\t      \t : isRegExp,\n\tisBoolean \t\t\t : isBoolean,\n\tisStrictBoolean \t : isStrictBoolean,\n\tisFunction   \t\t : isFunction,\n\tisTrue\t\t   \t\t : isTrue,\n\tisFalse\t\t   \t\t : isFalse,\n\tisLowerCase    \t\t : isLowerCase,\n\tisUpperCase    \t\t : isUpperCase,\n\tisTitleCase    \t\t : isTitleCase,\n\tisNumeric            : isNumeric,\n\tisJSON         \t\t : isJSON,\n\tisBase64       \t\t : isBase64,\n\tisEmpty        \t\t : isEmpty,\n\tisBlank        \t\t : isBlank,\n\tisWhiteSpace   \t\t : isWhiteSpace,\n\tisAlpha        \t\t : isAlpha,\n\tisAlphanumeric \t\t : isAlphanumeric,\n\tisHexadecimal  \t\t : isHexadecimal,\n\tisAscii   \t\t\t : isAscii,\n\tisValidEmail  \t\t : isValidEmail,\n\tisUUID\t\t\t\t : isUUID,\n\tisURIEncoded         : isURIEncoded,\n\tcontainsKey \t\t : containsKey,\n\tcontainsDeepKey      : containsDeepKey,\n\tcontains  \t\t\t : contains,\n\tcontainsIgnoreCase   : containsIgnoreCase,\n\tisPalindrome         : isPalindrome,\n\tobjectEquals\t\t : objectEquals,\n\tisNull\t\t\t\t : isNull,\n\thasAnyMethod\t\t : hasAnyMethod,\n\tisMethodPresent\t\t : isMethodPresent\n};"],"mappings":"AACA,IAAWA,KAAK,GAAG,WAAW;EAC1BC,YAAY,GAAG,cAAc;EACtBC,KAAK,GAAG,gBAAgB;EACzBC,MAAM,GAAG,mFAAmF;EAC3FC,KAAK,GAAG,sHAAsH;AACpIC,WAAW,GAAG,cAAc;;AAEjC;AACA,IAAIC,IAAI,GAAG;EACH,GAAG,EAAE,iFAAiF;EACtF,GAAG,EAAE,yFAAyF;EAC9F,GAAG,EAAE,yFAAyF;EAC9FC,GAAG,EAAE;AACT,CAAC;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAAEC,KAAK,EAAE;EACzB,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQ,CAAEL,KAAK,EAAE;EACzB,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,OAAO,CAACN,KAAK,EAAE;EACvB,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,gBAAgB;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,QAAQ,CAACP,KAAK,EAAE;EACxB,OAAQ,OAAOA,KAAK,KAAK,QAAQ;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,cAAc,CAACR,KAAK,EAAE;EAC9B,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,QAAQ,CAACT,KAAK,EAAE;EACxB,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,eAAe,CAACV,KAAK,EAAE;EAC/B,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,kBAAkB;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,SAAS,CAACX,KAAK,EAAE;EACzB,IAAIY,MAAM,CAACZ,KAAK,CAAC,EAChB,OAAO,KAAK;EAEb,OAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAACa,OAAO,CAACb,KAAK,CAACc,WAAW,EAAE,CAACX,QAAQ,EAAE,CAAC,IAAI,CAAC;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,UAAU,CAACf,KAAK,EAAE;EAC1B,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC,KAAK,mBAAmB;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,MAAM,CAAEhB,KAAK,EAAE;EACvB,OAAQA,KAAK,KAAK,IAAI;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,OAAO,CAACjB,KAAK,EAAE;EACvB,OAAQA,KAAK,KAAK,KAAK;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,WAAW,CAAElB,KAAK,EAAE;EAC5B,IAAID,QAAQ,CAACC,KAAK,CAAC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}